// Generated by CoffeeScript 1.6.3
(function() {
  var jqueryPep, noteApp;

  noteApp = angular.module('noteApp', []);

  jqueryPep = (function() {
    var _socket;

    function jqueryPep() {}

    _socket = GV.socket;

    jqueryPep.prototype.pep = function(jqobj) {
      _socket = _socket;
      return jqobj.pep({
        initiate: function(ev, obj) {
          return obj.startPosition = obj.$el.offset();
        },
        drag: function(ev, obj, v) {
          var $pos, idx, pos;
          v = v || obj.velocity();
          $pos = obj.$el.offset();
          pos = new Position(obj.$el.attr("id"), $pos.top, $pos.left);
          idx = Postit.getIndexById(GV.getScope().postits, obj.$el.attr("id"));
          GV.getScope().postits[idx].position = pos;
          return _socket.emit('move', pos);
        },
        elementsWithInteraction: false,
        constrainTo: 'parent'
      });
    };

    return jqueryPep;

  })();

  noteApp.controller('PostitListCtrl', function($scope) {
    var _identify, _socket;
    _identify = GV.identify;
    _socket = GV.socket;
    $scope.postits = [];
    $scope.identify = _identify;
    $scope.news = "";
    $scope.escapeContent = function(text) {
      var matches, regexToken, source, token, url, urlArray, _i, _len;
      source = (text || '').toString();
      urlArray = [];
      matches;
      source = $("<div>" + source + "</div>").text();
      regexToken = /(((ftp|https?):\/\/)[\-\w@:%_\+.~#?,&\/\/=]+)|((mailto:)?[_.\w-]+@([\w][\w\-]+\.)+[a-zA-Z]{2,3})/g;
      while ((matches = regexToken.exec(source)) != null) {
        token = matches[0];
        urlArray.push(token);
      }
      for (_i = 0, _len = urlArray.length; _i < _len; _i++) {
        url = urlArray[_i];
        source = source.replace(url, "<a href='" + url + "' target='_blank' >" + (url.length <= 30 ? url : url.substring(0, 27) + "...") + "</a>");
      }
      return source;
    };
    $scope.addPostit = function() {
      var diff, p;
      diff = $scope.postits.length * 21;
      p = new Postit();
      p.identify = _identify;
      p.position = {
        top: 110 + diff,
        left: 25
      };
      p.contents.push(new Content(ContentType.Document, ""));
      return $scope.postits.push(p);
    };
    $scope.toggleEditing = function() {
      var area, editor, h, jObj, jpep;
      jObj = $(event.target);
      area = jObj.closest('.item');
      if (area.length > 0) {
        h = area.height();
        area.addClass('editing');
        editor = area.find("textarea").height(h).focus();
        return $.pep.unbind(jObj.closest('.postit'));
      } else if (!jObj.closest('.editor').length > 0) {
        jpep = new jqueryPep();
        $('.editing').closest(".postit").each(function() {
          var idx, p;
          idx = Postit.getIndexById($scope.postits, $(this).prop("id"));
          p = $scope.postits[idx];
          jpep.pep($(this));
          return _socket.emit('update', p);
        });
        return $('.editing').removeClass('editing');
      }
    };
    return $scope.closePostit = function(dom) {
      var idx, removed, target;
      target = {};
      event.preventDefault();
      event.stopPropagation();
      if (dom != null) {
        target = dom;
      } else {
        target = $(event.target).closest('.postit');
      }
      if (target != null) {
        idx = Postit.getIndexById($scope.postits, target.prop("id"));
        removed = null;
        if (idx > -1) {
          removed = $scope.postits.splice(idx, 1);
        }
        if (removed != null) {
          return _socket.emit('delete', removed[0]);
        }
      }
    };
  });

  noteApp.directive('postitRender', function() {
    return function(scope, element, attrs) {
      var jpep, jqElem;
      jpep = new jqueryPep();
      jqElem = angular.element(element);
      jqElem.offset({
        top: scope.p.position.top,
        left: scope.p.position.left
      });
      jpep.pep(jqElem);
      Hammer(element[0]).on("hold", function() {
        return scope.toggleEditing();
      });
      return Hammer(jqElem.find(".post-close").get(0)).on("tap", function() {
        return scope.closePostit();
      });
    };
  });

}).call(this);
